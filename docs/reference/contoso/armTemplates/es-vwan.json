{
	"$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"enterpriseScaleCompanyPrefix": {
			"type": "string",
			"maxLength": 10,
			"metadata": {
				"description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
			}
		},
		"tenantId": {
			"type": "string",
			"defaultValue": "e47e6989-0297-4281-8a6a-87f8f72c68e3",
			"metadata": {
				"description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
			}
		},
		"objectId": {
			"type": "string",
			"defaultValue": "1e6e96c6-9313-4136-9321-8cfbf5cec36e",
			"metadata": {
				"description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
			}
		},
		"privateDnsZoneName1": {
			"type": "string",
			"defaultValue": "privatelink.database.windows.net",
			"metadata": {
				"description": "Private DNS zone name"
			}
		},
		"privateDnsZoneName2": {
			"type": "string",
			"defaultValue": "privatelink.blob.core.windows.net",
			"metadata": {
				"description": "Private DNS zone name"
			}
		},
		"privateDnsZoneName3": {
			"type": "string",
			"defaultValue": "privatelink.table.core.windows.net",
			"metadata": {
				"description": "Private DNS zone name"
			}
		},
		"privateDnsZoneName4": {
			"type": "string",
			"defaultValue": "privatelink.queue.core.windows.net",
			"metadata": {
				"description": "Private DNS zone name"
			}
		},
		"privateDnsZoneName5": {
			"type": "string",
			"defaultValue": "privatelink.file.core.windows.net",
			"metadata": {
				"description": "Private DNS zone name"
			}
		},
		"privateDnsZoneName6": {
			"type": "string",
			"defaultValue": "privatelink.vaultcore.azure.net",
			"metadata": {
				"description": "Private DNS zone name"
			}
		},
		"keysPermissions": {
			"type": "array",
			"defaultValue": [
				"list"
			],
			"metadata": {
				"description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
			}
		},
		"secretsPermissions": {
			"type": "array",
			"defaultValue": [
				"list"
			],
			"metadata": {
				"description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
			}
		},
		"managementSubscriptionId": {
			"type": "string",
			"defaultValue": "7d8bccc8-ddf0-40fb-acf8-61829c21db71",
			"maxLength": 36,
			"metadata": {
				"description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
			}
		},
		"connectivitySubscriptionId": {
			"type": "string",
			"defaultValue": "0e4d1e00-5638-4667-ba48-357115eb32a1",
			"maxLength": 36,
			"metadata": {
				"description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
			}
		},
		"identitySubscriptionId": {
			"type": "string",
			"defaultValue": "ccf951dc-2860-42f1-9e1a-5adf65d9220f",
			"maxLength": 36,
			"metadata": {
				"description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
			}
		},
		"identityVnetName": {
			"type": "string",
			"defaultValue": "identity-vnet",
			"metadata": {
				"description": "hub vnet name"
			}
		},
		"networkSecurityGroupName": {
			"type": "string",
			"defaultValue": "identitysub-nsg",
			"metadata": {
				"description": "hub vnet name"
			}
		},
		"subnet1Prefix": {
			"type": "string",
			"defaultValue": "10.122.122.128/27",
			"metadata": {
				"description": "hub vnet name"
			}
		},
		"DNSServerAddress": {
			"type": "string",
			"defaultValue": "10.122.122.135",
			"metadata": {
				"description": "hub vnet name"
			}
		},

		"subnet2Prefix": {
			"type": "string",
			"defaultValue": "10.122.122.160/27",
			"metadata": {
				"description": "hub vnet name"
			}
		},
		"subnet3Prefix": {
			"type": "string",
			"defaultValue": "10.122.122.192/27",
			"metadata": {
				"description": "hub vnet name"
			}
		},
		"onlineVnetName": {
			"type": "string",
			"defaultValue": "online-vnet",
			"metadata": {
				"description": "hub vnet name"
			}
		},
		"prodVnetName": {
			"type": "string",
			"defaultValue": "prod-vnet",
			"metadata": {
				"description": "prod vnet name"
			}
		},
		"uatVnetName": {
			"type": "string",
			"defaultValue": "uat-vnet",
			"metadata": {
				"description": "uat vnet name"
			}
		},
		"devVnetName": {
			"type": "string",
			"defaultValue": "dev-vnet",
			"metadata": {
				"description": "dev vnet name"
			}
		},
		"identityVnetPrefix": {
			"type": "string",
			"defaultValue": "10.122.122.0/24",
			"metadata": {
				"description": "identity Vnet Address Space"
			}
		},
		"onlineVnetPrefix": {
			"type": "string",
			"defaultValue": "10.122.0.0/19",
			"metadata": {
				"description": "online Vnet Address Space"
			}
		},
		"prodVnetPrefix": {
			"type": "string",
			"defaultValue": "10.122.32.0/19",
			"metadata": {
				"description": "prod Vnet Address Space"
			}
		},
		"uatVnetPrefix": {
			"type": "string",
			"defaultValue": "10.122.80.0/20",
			"metadata": {
				"description": "uat Vnet Address Space"
			}
		},
		"devVnetPrefix": {
			"type": "string",
			"defaultValue": "10.122.64.0/20",
			"metadata": {
				"description": "dev Vnet Address Space"
			}
		},
		"denySubnetWithoutNsgForIdentity": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"denyRdpForIdentity": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"denyPipForIdentity": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"enableVmBackupForIdentity": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"onlineLzSubscriptionId": {
			"type": "array",
			"defaultValue": ["00427000-3587-4a3b-9817-803373c88774"],
			"metadata": {
				"description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
			}
		},
		"prodLzSubscriptionId": {
			"type": "array",
			"defaultValue": ["4dd899d2-4f99-485e-b1bc-7d44c2a2e993"],
			"metadata": {
				"description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first prod landing zones."
			}
		},
		"uatLzSubscriptionId": {
			"type": "array",
			"defaultValue": ["146cdf8a-a785-468c-8e4c-ee958acad65b"],
			"metadata": {
				"description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first uat landing zones."
			}
		},
		"devLzSubscriptionId": {
			"type": "array",
			"defaultValue": ["6d73017e-c20f-4fe1-9f54-0f4a9d992e66"],
			"metadata": {
				"description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first dev landing zones."
			}
		},
		"sbxLzSubscriptionId": {
			"type": "array",
			"defaultValue": ["47d60737-c43c-48d2-bdb5-8b851d533075"],
			"metadata": {
				"description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first sbx landing zones."
			}
		},
		"keyVaultName": {
			"type": "string",
			"defaultValue": "fmg-kvault",
			"metadata": {
				"description": "Specifies the name of the key vault."
			}
		},
		"enabledForDeployment": {
			"type": "bool",
			"defaultValue": true,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
			}
		},
		"enabledForDiskEncryption": {
			"type": "bool",
			"defaultValue": true,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
			}
		},
		"enabledForTemplateDeployment": {
			"type": "bool",
			"defaultValue": true,
			"allowedValues": [
				true,
				false
			],
			"metadata": {
				"description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
			}
		},
		"skuName": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues": [
				"Standard",
				"Premium"
			],
			"metadata": {
				"description": "Specifies whether the key vault is a standard vault or a premium vault."
			}
		},
		"adminUsername": {
			"type": "string",
			"defaultValue": "azureuser",
			"metadata": {
				"description": "The name of the Administrator of the new VM and Domain"
			}
		},
		"adminPassword": {
			"type": "string",
			"defaultValue": "Wind0wsazure",
			"metadata": {
				"description": "The password for the Administrator account of the new VM and Domain"
			}
		},
		"domainName": {
			"type": "string",
			"defaultValue": "test.com",
			"metadata": {
				"description": "The FQDN of the AD Domain created "
			}
		},

		"_artifactsLocationSasToken": {
			"type": "securestring",
			"metadata": {
				"description": "Auto-generated token to access _artifactsLocation"
			},
			"defaultValue": ""
		},
		"vmSize": {
			"type": "string",
			"defaultValue": "Standard_D2s_v3",
			"metadata": {
				"description": "Size of the VM for the controller"
			}
		},
		"virtualMachineName": {
			"type": "string",
			"defaultValue": "adVM",
			"metadata": {
				"description": "Virtual machine name."
			}
		},
		"networkInterfaceName": {
			"type": "string",
			"defaultValue": "adNic",
			"metadata": {
				"description": "Network interface name."
			}
		},
		"availabilitySetName": {
			"type": "string",
			"defaultValue": "adAvailabiltySet",
			"metadata": {
				"description": "Availability set name."
			}
		},
		"enableLogAnalytics": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			],
			"metadata": {
				"description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
			}
		},
		"retentionInDays": {
			"type": "string",
			"defaultValue": ""
		},
		"enableAsc": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			],
			"metadata": {
				"description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
			}
		},
		"enableAksPolicy": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableAscForServers": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForAppServices": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForStorage": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForSql": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForKeyVault": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForArm": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForDns": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForKubernetes": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"enableAscForRegistries": {
			"type": "string",
			"defaultValue": "Free",
			"allowedValues": [
				"Standard",
				"Free"
			]
		},
		"denyAksPrivileged": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"denyAksPrivilegedEscalation": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"denyHttpIngressForAks": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableArcMonitoring": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			],
			"metadata": {
				"description": "If 'Yes' is selected, policy will be assigned to enforce Arc monitoring."
			}
		},
		"enableVmMonitoring": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			],
			"metadata": {
				"description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
			}
		},
		"enableVmssMonitoring": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			],
			"metadata": {
				"description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
			}
		},
		"enableSecuritySolution": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableAgentHealth": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableChangeTracking": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableUpdateMgmt": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "Yes"
		},
		"enableActivityLog": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "Yes"
		},
		"enableAntiMalware": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "Yes"
		},
		"enableVmInsights": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "Yes"
		},
		"enableServiceMap": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "Yes"
		},
		"enableSqlAssessment": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "Yes"
		},
		"enableSqlAudit": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableSqlEncryption": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableVmBackup": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"denyRdp": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableStorageHttps": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"denyIpForwarding": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"denySubnetWithoutNsg": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"addressPrefix": {
			"type": "string",
			"defaultValue": ""
		},
		"enableVpnGw": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"enableErGw": {
			"type": "string",
			"defaultValue": "No",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"primaryregioncode": {
			"type": "string",
			"defaultValue": "ase"
		},
		"secondaryregioncode": {
			"type": "string",
			"defaultValue": "ae"
		},
		"app": {
			"type": "string",
			"defaultValue": "sharepoint"
		},
		"location": {
			"type": "string",
			"defaultValue": "[deployment().location]"
		},
		"enableVwan": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"enableAzFw": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"paToken": {
			"type": "securestring",
			"defaultValue": ""
		},
		"principalId": {
			"type": "array",
			"defaultValue": []
		},
		"appId": {
			"type": "string",
			"defaultValue": ""
		},
		"principalSecret": {
			"type": "securestring",
			"defaultValue": ""
		},
		"gitHubUserNameOrOrg": {
			"type": "string",
			"defaultValue": ""
		},
		"repositoryName": {
			"type": "string",
			"defaultValue": ""
		},
		"enableAzOps": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			]
		},
		"subscriptionId": {
			"type": "string",
			"defaultValue": "",
			"maxLength": 36
		}
	},
	"variables": {
		"azPolicyEnvMapping": {
			"https://management.azure.com/": "auxiliary/policies.json",
			"https://management.chinacloudapi.cn": "auxiliary/mkPolicies.json",
			"https://management.azgov.com": "auxiliary/"
		},
		"azEnvPolicy": "[variables('azPolicyEnvMapping')[environment().resourceManager]]",
		"deploymentUris": {
			"managementGroups": "[uri(deployment().properties.templateLink.uri, 'auxiliary/mgmtGroups.json')]",
			"resourceGroups": "[uri(deployment().properties.templateLink.uri, 'auxiliary/rg.json')]",
			"policyDefinitions": "[concat(uri(deployment().properties.templateLink.uri, variables('azEnvPolicy')))]",
			"monitoring": "[uri(deployment().properties.templateLink.uri, 'auxiliary/logAnalytics.json')]",
			"monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'auxiliary/logAnalyticsSolutions.json')]",
			"connectivity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/vwan-connectivity.json')]",
			"diagnosticsAndSecurity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/diagnosticsAndSecurity.json')]",
			"landingZone": "[uri(deployment().properties.templateLink.uri, 'auxiliary/lz.json')]",
			"identity": "[uri(deployment().properties.templateLink.uri, 'auxiliary/identity.json')]",
			"azOps": "[uri(deployment().properties.templateLink.uri, 'auxiliary/azOpsSetup.json')]",
			"adps": "[uri(deployment().properties.templateLink.uri, 'auxiliary/CreateADPDC.ps1')]",
			"adzip": "[uri(deployment().properties.templateLink.uri, 'auxiliary/CreateADPDC.zip')]"

		},
		"rgNameIdentity": "[concat('rg', '-idy-', parameters('primaryregioncode'))]",
		"rgNameManagement": "[concat('rg', '-mgmt-', parameters('primaryregioncode'))]",
		"rgNamecldshellStgpri": "[concat('rg', '-cldshellStg-', parameters('primaryregioncode'))]",
		"rgNamecldshellStgsec": "[concat('rg', '-cldshellStg-', parameters('secondaryregioncode'))]",
		"rgNameOnline": "[concat('rg-', parameters('app'), '-online')]",
		"rgNameProd": "[concat('rg-', parameters('app'), '-prod')]",
		"rgNameUat": "[concat('rg-', parameters('app'), '-uat')]",
		"rgNameDev": "[concat('rg-', parameters('app'), '-dev')]",
		"rgNamesbx": "[concat('rg-', parameters('app'), '-sbx')]",
		"moveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-management', '/', parameters('managementSubscriptionId'))]",
		"noSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-management', '/', 'na')]",
		"noOnlineLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-online', '/', 'nalz')]",
		"noProdLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-prod', '/', 'nalz')]",
		"noUatLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-uat', '/', 'nalz')]",
		"noDevLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-dev', '/', 'nalz')]",
		"noSbxLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-sandboxes', '/', 'nalz')]",
		"connectivityMoveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-connectivity', '/', parameters('connectivitySubscriptionId'))]",
		"noConnectivitySubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-connectivity', '/', 'naconn')]",
		"identityMoveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-identity', '/', parameters('identitySubscriptionId'))]",
		"noIdentitySubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-identity', '/', 'naid')]",
		"deploymentNames": {
			"mgmtGroupDeploymentName": "[take(concat('EntScale-Mgs', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"resourceGroupDeploymentName": "[take(concat('EntScale-Rgs', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"policyDeploymentName": "[take(concat('EntScale-Policy', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"monitoringDeploymentName": "[take(concat('EntScale-Monitoring', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"monitoringSolutionsDeploymentName": "[take(concat('EntScale-Solutions', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"diagAndSecDeploymentName": "[take(concat('EntScale-DiagSec', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"connectivityDeploymentName": "[take(concat('EntScale-connec', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"lzDeploymentName": "[take(concat('EntScale-LZ', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"identityDeploymentName": "[take(concat('EntScale-ID', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
			"azOpsDeploymentName": "[take(concat('EntScale-AzOps', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]"
		}
	},
	"resources": [{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').managementGroups]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					}
				}
			}
		},
		{

			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "[variables('deploymentNames').resourceGroupDeploymentName]",
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').resourceGroups]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"managementSubscriptionId": {
						"value": "[parameters('managementSubscriptionId')]"
					},
					"onlineLzSubscriptionId": {
						"value": "[parameters('onlineLzSubscriptionId')]"
					},
					"prodLzSubscriptionId": {
						"value": "[parameters('prodLzSubscriptionId')]"
					},
					"uatLzSubscriptionId": {
						"value": "[parameters('uatLzSubscriptionId')]"
					},
					"devLzSubscriptionId": {
						"value": "[parameters('devLzSubscriptionId')]"
					},
					"identitySubscriptionId": {
						"value": "[parameters('identitySubscriptionId')]"
					},
					"sbxLzSubscriptionId": {
						"value": "[parameters('sbxLzSubscriptionId')]"
					},
					"primaryregioncode": {
						"value": "[parameters('primaryregioncode')]"
					},
					"secondaryregioncode": {
						"value": "[parameters('secondaryregioncode')]"
					},
					"app": {
						"value": "[parameters('app')]"
					}
				},
				"variables": {
					"rgNameIdentity": {
						"value": "[variables('rgNameIdentity')]"
					},
					"rgNameManagement": {
						"value": "[variables('rgNameManagement')]"
					},
					"rgNamecldshellStgpri": {
						"value": "[variables('rgNamecldshellStgpri')]"
					},
					"rgNamecldshellStgsec": {
						"value": "[variables('rgNamecldshellStgsec')]"
					},
					"rgNameOnline": {
						"value": "[variables('rgNameOnline')]"
					},
					"rgNameProd": {
						"value": "[variables('rgNameProd')]"
					},
					"rgNameUat": {
						"value": "[variables('rgNameUat')]"
					},
					"rgNameDev": {
						"value": "[variables('rgNameDev')]"
					},
					"rgNamesbx": {
						"value": "[variables('rgNamesbx')]"
					}
	
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "[variables('deploymentNames').policyDeploymentName]",
			"location": "[deployment().location]",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').policyDefinitions]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "[concat('preparingToLaunch', copyIndex())]",
			"location": "[deployment().location]",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
			"dependsOn": [
				"[variables('deploymentNames').policyDeploymentName]"
			],
			"copy": {
				"batchSize": 1,
				"count": 20,
				"mode": "Serial",
				"name": "policyCompletion"
			},
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [],
					"outputs": {}
				}
			}
		},
		{
			"condition": "[not(empty(parameters('managementSubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('managementSubscriptionId'))), variables('moveSubscription'), variables('noSubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"properties": {}
		},
		{
			"condition": "[not(empty(parameters('identitySubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('identitySubscriptionId'))), variables('identityMoveSubscription'), variables('noIdentitySubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"properties": {}
		},
		{
			"condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('onlineLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-online', '/', parameters('onlineLzSubscriptionId')[copyIndex()]), variables('noOnlineLzSubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"copy": {
				"name": "onlineLzMove",
				"count": "[length(parameters('onlineLzSubscriptionId'))]"
			},
			"properties": {}
		},
		{
			"condition": "[not(empty(parameters('prodLzSubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('prodLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-prod', '/', parameters('prodLzSubscriptionId')[copyIndex()]), variables('noProdLzSubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"copy": {
				"name": "onlineLzMove",
				"count": "[length(parameters('prodLzSubscriptionId'))]"
			},
			"properties": {}
		},
		{
			"condition": "[not(empty(parameters('uatLzSubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('uatLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-uat', '/', parameters('uatLzSubscriptionId')[copyIndex()]), variables('noUatLzSubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"copy": {
				"name": "onlineLzMove",
				"count": "[length(parameters('uatLzSubscriptionId'))]"
			},
			"properties": {}
		},
		{
			"condition": "[not(empty(parameters('devLzSubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('devLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-dev', '/', parameters('devLzSubscriptionId')[copyIndex()]), variables('noDevLzSubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"copy": {
				"name": "onlineLzMove",
				"count": "[length(parameters('devLzSubscriptionId'))]"
			},
			"properties": {}
		},
		{
			"condition": "[not(empty(parameters('sbxLzSubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('sbxLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-sandboxes', '/', parameters('sbxLzSubscriptionId')[copyIndex()]), variables('noSbxLzSubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').mgmtGroupDeploymentName]"
			],
			"copy": {
				"name": "onlineLzMove",
				"count": "[length(parameters('sbxLzSubscriptionId'))]"
			},
			"properties": {}
		},
		

		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "NSGdeployment",
			"subscriptionId": "[parameters('identitySubscriptionId')]",
			"resourceGroup": "[variables('rgNameIdentity')]",
			"dependsOn": [
				"[variables('deploymentNames').resourceGroupDeploymentName]"
			],

			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.Network/networkSecurityGroups",
							"apiVersion": "2020-05-01",
							"name": "[parameters('networkSecurityGroupName')]",
							"location": "[deployment().location]",
							"properties": {
								"securityRules": [{
									"name": "default-allow-3389",
									"properties": {
										"priority": 1000,
										"access": "Allow",
										"direction": "Inbound",
										"destinationPortRange": "3389",
										"protocol": "Tcp",
										"sourceAddressPrefix": "*",
										"sourcePortRange": "*",
										"destinationAddressPrefix": "*"
									}
								}]
							}
						}


					]
				}
			}
		},


		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "identityvnetdeployment",
			"resourceGroup": "[variables('rgNameIdentity')]",
			"dependsOn": [
				"[variables('deploymentNames').resourceGroupDeploymentName]",
				"NSGdeployment"
			],


			"subscriptionId": "[parameters('identitySubscriptionId')]",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.Network/virtualNetworks",
							"apiVersion": "2020-05-01",
							"name": "[parameters('identityVnetName')]",
							"location": "[deployment().location]",
							"properties": {
								"addressSpace": {
									"addressPrefixes": [
										"[parameters('identityVnetPrefix')]"
									]
								},
								"subnets": [{
										"name": "adds-prod-subnet",
										"properties": {
											"addressPrefix": "[parameters('subnet1Prefix')]",
											"networkSecurityGroup": {

												"id": "[concat('/subscriptions/', parameters('identitySubscriptionId'), '/resourceGroups/', variables('rgNameIdentity'), '/providers/Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
											}

										}
									},
									{
										"name": "adds-qa-subnet",
										"properties": {
											"addressPrefix": "[parameters('subnet2Prefix')]"

										}
									},
									{
										"name": "adds-dev-subnet",
										"properties": {
											"addressPrefix": "[parameters('subnet3Prefix')]"



										}
									}
								]
							}
						}


					]
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "DNSdeployment",
			"subscriptionId": "[parameters('identitySubscriptionId')]",
			"resourceGroup": "[variables('rgNameIdentity')]",
			"dependsOn": [
				"identityvnetdeployment"
			],
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [

						{
							"type": "Microsoft.Network/privateDnsZones",
							"apiVersion": "2020-01-01",
							"name": "[parameters('privateDnsZoneName1')]",
							"location": "global"
						},
						{
							"type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
							"apiVersion": "2020-01-01",
							"name": "[concat(parameters('privateDnsZoneName1'), '/', parameters('privateDnsZoneName1'), '-link')]",
							"location": "global",
							"dependsOn": [
								"[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName1'))]"
							],
							"properties": {
								"virtualNetwork": {

									"id": "[concat('/subscriptions/', parameters('identitySubscriptionId'), '/resourceGroups/', variables('rgNameIdentity'), '/providers/Microsoft.Network/virtualNetworks/', parameters('identityVnetName'))]"
								},
								"registrationEnabled": false
							}
						}


					]
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "ADdeployment",
			"subscriptionId": "[parameters('identitySubscriptionId')]",
			"resourceGroup": "[variables('rgNameIdentity')]",
			"dependsOn": [
				"identityvnetdeployment"
			],
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.Compute/availabilitySets",
							"apiVersion": "2019-03-01",
							"location": "[deployment().location]",
							"name": "[parameters('availabilitySetName')]",
							"properties": {
								"PlatformUpdateDomainCount": 20,
								"PlatformFaultDomainCount": 2
							},
							"sku": {
								"name": "Aligned"
							}
						},
						{
							"type": "Microsoft.Network/networkInterfaces",
							"apiVersion": "2019-02-01",
							"name": "[parameters('networkInterfaceName')]",
							"location": "[deployment().location]",
							"dependsOn": [
								"[parameters('availabilitySetName')]"
							],
							"properties": {
								"ipConfigurations": [{
									"name": "ipconfig1",
									"properties": {
										"privateIPAllocationMethod": "Static",
										"privateIPAddress": "[parameters('DNSServerAddress')]",
										"subnet": {

											"id": "[concat('/subscriptions/', parameters('identitySubscriptionId'), '/resourceGroups/', variables('rgNameIdentity'), '/providers/Microsoft.Network/virtualNetworks/', parameters('identityVnetName'), '/subnets/', 'adds-prod-subnet')]"
										}
									}
								}]
							}
						},
						{
							"type": "Microsoft.Compute/virtualMachines",
							"apiVersion": "2019-03-01",
							"name": "[parameters('virtualMachineName')]",
							"location": "[deployment().location]",
							"dependsOn": [
								"[parameters('networkInterfaceName')]",
								"[parameters('availabilitySetName')]"
							],
							"properties": {
								"hardwareProfile": {
									"vmSize": "[parameters('vmSize')]"
								},
								"availabilitySet": {

									"id": "[concat('/subscriptions/', parameters('identitySubscriptionId'), '/resourceGroups/', variables('rgNameIdentity'), '/providers/Microsoft.Compute/availabilitySets/', parameters('availabilitySetName'))]"

								},
								"osProfile": {
									"computerName": "[parameters('virtualMachineName')]",
									"adminUsername": "[parameters('adminUsername')]",
									"adminPassword": "[parameters('adminPassword')]"
								},
								"storageProfile": {
									"imageReference": {
										"publisher": "MicrosoftWindowsServer",
										"offer": "WindowsServer",
										"sku": "2019-Datacenter",
										"version": "latest"
									},
									"osDisk": {
										"name": "[concat(parameters('virtualMachineName'),'_OSDisk')]",
										"caching": "ReadOnly",
										"createOption": "FromImage",
										"managedDisk": {
											"storageAccountType": "StandardSSD_LRS"
										}
									},
									"dataDisks": [{
										"name": "[concat(parameters('virtualMachineName'), '_DataDisk')]",
										"caching": "None",
										"createOption": "Empty",
										"diskSizeGB": 20,
										"managedDisk": {
											"storageAccountType": "StandardSSD_LRS"
										},
										"lun": 0
									}]
								},
								"networkProfile": {
									"networkInterfaces": [{

										"id": "[concat('/subscriptions/', parameters('identitySubscriptionId'), '/resourceGroups/', variables('rgNameIdentity'), '/providers/Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]"

									}]
								}
							},
							"resources": [{
								"type": "extensions",
								"apiVersion": "2019-03-01",
								"name": "CreateADForest",
								"location": "[deployment().location]",
								"dependsOn": [
									"[parameters('virtualMachineName')]"
								],
								"properties": {
									"publisher": "Microsoft.Powershell",
									"type": "DSC",
									"typeHandlerVersion": "2.19",
									"autoUpgradeMinorVersion": true,
									"settings": {
										"ModulesUrl": "[variables('deploymentUris').adzip]",
										"ConfigurationFunction": "CreateADPDC.ps1\\CreateADPDC",
										"Properties": {
											"DomainName": "[parameters('domainName')]",
											"AdminCreds": {
												"UserName": "[parameters('adminUsername')]",
												"Password": "PrivateSettingsRef:AdminPassword"
											}
										}
									},
									"protectedSettings": {
										"Items": {
											"AdminPassword": "[parameters('adminPassword')]"
										}
									}
								}
							}]
						}
						
							
								


					]
				}
			}
		},

		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "onlinevnetdeployment",
			"resourceGroup": "[variables('rgNameOnline')]",
			"dependsOn": [
				"[variables('deploymentNames').resourceGroupDeploymentName]"
			],
			"copy": {
				"name": "vnCopy",
				"count": "[if(not(empty(parameters('onlineLzSubscriptionId'))), length(parameters('onlineLzSubscriptionId')), 1)]"
			},

			"subscriptionId": "[if(not(empty(parameters('onlineLzSubscriptionId'))), parameters('onlineLzSubscriptionId')[copyIndex()], '')]",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.Network/virtualNetworks",
							"apiVersion": "2020-05-01",
							"name": "[parameters('onlineVnetName')]",
							"location": "[deployment().location]",
							"properties": {
								"addressSpace": {
									"addressPrefixes": [
										"[parameters('onlineVnetPrefix')]"
									]
								}
							}
						}


					]
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "prodvnetdeployment",
			"resourceGroup": "[variables('rgNameProd')]",
			"dependsOn": [
				"[variables('deploymentNames').resourceGroupDeploymentName]"
			],
			"copy": {
				"name": "vnCopy",
				"count": "[if(not(empty(parameters('prodLzSubscriptionId'))), length(parameters('prodLzSubscriptionId')), 1)]"
			},

			"subscriptionId": "[if(not(empty(parameters('prodLzSubscriptionId'))), parameters('prodLzSubscriptionId')[copyIndex()], '')]",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.Network/virtualNetworks",
							"apiVersion": "2020-05-01",
							"name": "[parameters('prodVnetName')]",
							"location": "[deployment().location]",
							"properties": {
								"addressSpace": {
									"addressPrefixes": [
										"[parameters('prodVnetPrefix')]"
									]
								}
							}
						}


					]
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "uatvnetdeployment",
			"resourceGroup": "[variables('rgNameUat')]",
			"dependsOn": [
				"[variables('deploymentNames').resourceGroupDeploymentName]"
			],
			"copy": {
				"name": "vnCopy",
				"count": "[if(not(empty(parameters('uatLzSubscriptionId'))), length(parameters('uatLzSubscriptionId')), 1)]"
			},

			"subscriptionId": "[if(not(empty(parameters('uatLzSubscriptionId'))), parameters('uatLzSubscriptionId')[copyIndex()], '')]",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.Network/virtualNetworks",
							"apiVersion": "2020-05-01",
							"name": "[parameters('uatVnetName')]",
							"location": "[deployment().location]",
							"properties": {
								"addressSpace": {
									"addressPrefixes": [
										"[parameters('uatVnetPrefix')]"
									]
								}
							}
						}


					]
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "devvnetdeployment",
			"resourceGroup": "[variables('rgNameDev')]",
			"dependsOn": [
				"[variables('deploymentNames').resourceGroupDeploymentName]"
			],
			"copy": {
				"name": "vnCopy",
				"count": "[if(not(empty(parameters('devLzSubscriptionId'))), length(parameters('devLzSubscriptionId')), 1)]"
			},

			"subscriptionId": "[if(not(empty(parameters('devLzSubscriptionId'))), parameters('devLzSubscriptionId')[copyIndex()], '')]",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.Network/virtualNetworks",
							"apiVersion": "2020-05-01",
							"name": "[parameters('devVnetName')]",
							"location": "[deployment().location]",
							"properties": {
								"addressSpace": {
									"addressPrefixes": [
										"10.122.96.0/21"
									]
								},
								"subnets": [{
										"name": "FrontEnd",
										"properties": {
											"addressPrefix": "10.122.98.0/24"


										}
									},
									{
										"name": "BackEnd",
										"properties": {
											"addressPrefix": "10.122.99.0/24"


										}
									},
									{
										"name": "Data",
										"properties": {
											"addressPrefix": "10.122.100.0/24"


										}
									},
									{
										"name": "ase",
										"properties": {
											"addressPrefix": "10.122.101.0/24"

										}
									},
									{
										"name": "smi",
										"properties": {
											"addressPrefix": "10.122.103.128/27"



										}
									}
								]
							}
						}


					]
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-10-01",
			"name": "keyvaultdeployment",
			"subscriptionId": "[parameters('managementSubscriptionId')]",
			"resourceGroup": "[variables('rgNameManagement')]",
			"dependsOn": [
				"[variables('deploymentNames').resourceGroupDeploymentName]"
			],

			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"parameters": {},
					"resources": [{
							"type": "Microsoft.KeyVault/vaults",
							"apiVersion": "2019-09-01",
							"name": "[parameters('keyVaultName')]",
							"location": "[deployment().location]",
							"properties": {
								"enabledForDeployment": "[parameters('enabledForDeployment')]",
								"enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
								"enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
								"tenantId": "[parameters('tenantId')]",
								"accessPolicies": [{
									"objectId": "[parameters('objectId')]",
									"tenantId": "[parameters('tenantId')]",
									"permissions": {
										"keys": "[parameters('keysPermissions')]",
										"secrets": "[parameters('secretsPermissions')]"
									}
								}],
								"sku": {
									"name": "[parameters('skuName')]",
									"family": "A"
								},
								"networkAcls": {
									"defaultAction": "Allow",
									"bypass": "AzureServices"
								}
							}
						}


					]
				}
			}
		},

		{
			"condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-management')]",
			"name": "[variables('deploymentNames').monitoringDeploymentName]",
			"dependsOn": [
				"[variables('deploymentNames').policyDeploymentName]",
				"policyCompletion"
			],
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').monitoring]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"enableLogAnalytics": {
						"value": "[parameters('enableLogAnalytics')]"
					},
					"managementSubscriptionId": {
						"value": "[parameters('managementSubscriptionId')]"
					},
					"retentionInDays": {
						"value": "[parameters('retentionInDays')]"
					}
				}
			}
		},
		{
			"condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableAntiMalware'), 'Yes'), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"subscriptionId": "[parameters('managementSubscriptionId')]",
			"name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
			"dependsOn": [
				"[variables('deploymentNames').monitoringDeploymentName]"
			],
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').monitoringSolutions]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"managementSubscriptionId": {
						"value": "[parameters('managementSubscriptionId')]"
					},
					"enableSecuritySolution": {
						"value": "[parameters('enableSecuritySolution')]"
					},
					"enableAgentHealth": {
						"value": "[parameters('enableAgentHealth')]"
					},
					"enableChangeTracking": {
						"value": "[parameters('enableChangeTracking')]"
					},
					"enableUpdateMgmt": {
						"value": "[parameters('enableUpdateMgmt')]"
					},
					"enableActivityLog": {
						"value": "[parameters('enableActivityLog')]"
					},
					"enableAntiMalware": {
						"value": "[parameters('enableAntiMalware')]"
					},
					"enableVmInsights": {
						"value": "[parameters('enableVmInsights')]"
					},
					"enableServiceMap": {
						"value": "[parameters('enableServiceMap')]"
					},
					"enableSqlAssessment": {
						"value": "[parameters('enableSqlAssessment')]"
					}
				}
			}
		},
		{
			"condition": "[not(empty(parameters('identitySubscriptionId')))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-identity')]",
			"name": "[variables('deploymentNames').identityDeploymentName]",
			"dependsOn": [
				"[variables('deploymentNames').policyDeploymentName]",
				"policyCompletion"
			],
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').identity]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"denyRdpForIdentity": {
						"value": "[parameters('denyRdpForIdentity')]"
					},
					"denySubnetWithoutNsgForIdentity": {
						"value": "[parameters('denySubnetWithoutNsgForIdentity')]"
					},
					"denyPipForIdentity": {
						"value": "[parameters('denyPipForIdentity')]"
					},
					"enableVmBackupForIdentity": {
						"value": "[parameters('enableVmBackupForIdentity')]"
					}
				}
			}
		},
		{
			"condition": "[or(or(or(or(or(or(equals(parameters('enableVmBackup'), 'Yes'), equals(parameters('enableSqlAudit'), 'Yes')), equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), equals(parameters('denyHttpIngressForAks'), 'Yes')), equals(parameters('denyAksPrivileged'), 'Yes'), equals(parameters('denyAksPrivileged'), 'Yes')), equals(parameters('denySubnetWithoutNsg'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')), equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes')), equals(parameters('enableSqlEncryption'), 'Yes'), equals(parameters('enableStorageHttps'), 'Yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-landingzones')]",
			"name": "[variables('deploymentNames').lzDeploymentName]",
			"dependsOn": [
				"[variables('deploymentNames').policyDeploymentName]",
				"policyCompletion"
			],
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').landingZone]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"denyHttpIngressForAks": {
						"value": "[parameters('denyHttpIngressForAks')]"
					},
					"denyAksPrivilegedEscalation": {
						"value": "[parameters('denyAksPrivilegedEscalation')]"
					},
					"denyAksPrivileged": {
						"value": "[parameters('denyAksPrivileged')]"
					},
					"enableSqlAudit": {
						"value": "[parameters('enableSqlAudit')]"
					},
					"enableSqlEncryption": {
						"value": "[parameters('enableSqlEncryption')]"
					},
					"enableVmBackup": {
						"value": "[parameters('enableVmBackup')]"
					},
					"denyRdp": {
						"value": "[parameters('denyRdp')]"
					},
					"enableAksPolicy": {
						"value": "[parameters('enableAksPolicy')]"
					},
					"enableStorageHttps": {
						"value": "[parameters('enableStorageHttps')]"
					},
					"denyIpForwarding": {
						"value": "[parameters('denyIpForwarding')]"
					},
					"denySubnetWithoutNsg": {
						"value": "[parameters('denySubnetWithoutNsg')]"
					}
				}
			}
		},
		{
			"condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
			"name": "[variables('deploymentNames').diagAndSecDeploymentName]",
			"dependsOn": [
				"[variables('deploymentNames').monitoringDeploymentName]"
			],
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').diagnosticsAndSecurity]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"enableLogAnalytics": {
						"value": "[parameters('enableLogAnalytics')]"
					},
					"enableAsc": {
						"value": "[parameters('enableAsc')]"
					},
					"enableAscForServers": {
						"value": "[parameters('enableAscForServers')]"
					},
					"enableAscForAppServices": {
						"value": "[parameters('enableAscForAppServices')]"
					},
					"enableAscForStorage": {
						"value": "[parameters('enableAscForStorage')]"
					},
					"enableAscForSql": {
						"value": "[parameters('enableAscForSql')]"
					},
					"enableAscForKeyVault": {
						"value": "[parameters('enableAscForKeyVault')]"
					},
					"enableAscForArm": {
						"value": "[parameters('enableAscForArm')]"
					},
					"enableAscForDns": {
						"value": "[parameters('enableAscForDns')]"
					},
					"enableAscForKubernetes": {
						"value": "[parameters('enableAscForKubernetes')]"
					},
					"enableAscForRegistries": {
						"value": "[parameters('enableAscForRegistries')]"
					},
					"managementSubscriptionId": {
						"value": "[parameters('managementSubscriptionId')]"
					},
					"onlineLzSubscriptionId": {
						"value": "[parameters('onlineLzSubscriptionId')]"
					},
					"prodLzSubscriptionId": {
						"value": "[parameters('prodLzSubscriptionId')]"
					},
					"uatLzSubscriptionId": {
						"value": "[parameters('uatLzSubscriptionId')]"
					},
					"devLzSubscriptionId": {
						"value": "[parameters('devLzSubscriptionId')]"
					},
					"identitySubscriptionId": {
						"value": "[parameters('identitySubscriptionId')]"
					},
					"connectivitySubscriptionId": {
						"value": "[parameters('connectivitySubscriptionId')]"
					},
					"enableVmMonitoring": {
						"value": "[parameters('enableVmMonitoring')]"
					},
					"enableVmssMonitoring": {
						"value": "[parameters('enableVmssMonitoring')]"
					},
					"enableArcMonitoring": {
						"value": "[parameters('enableArcMonitoring')]"
					}
				}
			}
		},
		{
			"condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
			"type": "Microsoft.Management/managementGroups/subscriptions",
			"apiVersion": "2020-05-01",
			"name": "[if(not(empty(parameters('connectivitySubscriptionId'))), variables('connectivityMoveSubscription'), variables('noConnectivitySubscription'))]",
			"dependsOn": [
				"[variables('deploymentNames').policyDeploymentName]",
				"policyCompletion"
			],
			"properties": {}
		},
		{
			"condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableVwan'), 'Yes'))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2019-05-01",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-connectivity')]",
			"name": "[variables('deploymentNames').connectivityDeploymentName]",
			"dependsOn": [
				"[variables('deploymentNames').diagAndSecDeploymentName]",
				"policyCompletion"
			],
			"location": "[deployment().location]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').connectivity]"
				},
				"parameters": {
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"enableVwan": {
						"value": "[parameters('enableVwan')]"
					},
					"enableAzFw": {
						"value": "[parameters('enableAzFw')]"
					},
					"addressPrefix": {
						"value": "[parameters('addressPrefix')]"
					},
					"enableVpnGw": {
						"value": "[parameters('enableVpnGw')]"
					},
					"enableErGw": {
						"value": "[parameters('enableErGw')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"primaryregioncode": {
						"value": "[parameters('primaryregioncode')]"
					},
					"secondaryregioncode": {
						"value": "[parameters('secondaryregioncode')]"
					},
					"connectivitySubscriptionId": {
						"value": "[parameters('connectivitySubscriptionId')]"
					},
					"identitySubscriptionId": {
						"value": "[parameters('identitySubscriptionId')]"
					},
					"onlineLzSubscriptionId": {
						"value": "[parameters('onlineLzSubscriptionId')]"
					},
					"prodLzSubscriptionId": {
						"value": "[parameters('prodLzSubscriptionId')]"
					},
					"uatLzSubscriptionId": {
						"value": "[parameters('uatLzSubscriptionId')]"
					},
					"devLzSubscriptionId": {
						"value": "[parameters('devLzSubscriptionId')]"
					}
				}
			}
		},
		{
			"condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "2020-06-01",
			"scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
			"name": "[variables('deploymentNames').azOpsDeploymentName]",
			"location": "[deployment().location]",
			"dependsOn": [
				"[variables('deploymentNames').lzDeploymentName]",
				"[variables('deploymentNames').diagAndSecDeploymentName]",
				"[variables('deploymentNames').mgmtGroupDeploymentName]",
				"[variables('deploymentNames').monitoringDeploymentName]",
				"[variables('deploymentNames').monitoringSolutionsDeploymentName]",
				"[variables('deploymentNames').policyDeploymentName]",
				"[variables('deploymentNames').connectivityDeploymentName]",
				"[variables('deploymentNames').identityDeploymentName]",
				"policyCompletion"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"contentVersion": "1.0.0.0",
					"uri": "[variables('deploymentUris').azOps]"
				},
				"parameters": {
					"paToken": {
						"value": "[parameters('paToken')]"
					},
					"principalId": {
						"value": "[parameters('principalId')]"
					},
					"principalSecret": {
						"value": "[parameters('principalSecret')]"
					},
					"gitHubUserNameOrOrg": {
						"value": "[parameters('gitHubUserNameOrOrg')]"
					},
					"topLevelManagementGroupPrefix": {
						"value": "[parameters('enterpriseScaleCompanyPrefix')]"
					},
					"subscriptionId": {
						"value": "[parameters('subscriptionId')]"
					},
					"appId": {
						"value": "[parameters('appId')]"
					},
					"repositoryName": {
						"value": "[parameters('repositoryName')]"
					}
				}
			}
		}
	],
	"outputs": {
		"deployment": {
			"type": "string",
			"value": "[concat(deployment().name, ' has successfully deployed. Welcome to Enterprise-Scale!')]"
		}
	}
}
