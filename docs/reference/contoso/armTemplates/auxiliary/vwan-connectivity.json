{
	"$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"topLevelManagementGroupPrefix": {
			"type": "string",
			"maxLength": 10,
			"metadata": {
				"description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
			}
		},
		"addressPrefix": {
			"type": "string",
			"metadata": {
				"displayName": "addressPrefix",
				"description": "Address prefix of the VHUB"
			},
			"defaultValue": "192.168.0.0/24"
		},
		"identityVnetName": {
			"type": "string"
			
		},
		
		"onlineVnetName": {
			"type": "string"
		},
		"prodVnetName": {
			"type": "string"
		},
		"uatVnetName": {
			"type": "string"
		},
		"devVnetName": {
			"type": "string"
		},
		"location": {
			"type": "string",
			"metadata": {
				"displayName": "location",
				"description": "Location of the VHUB"
			},
			"defaultValue": "[deployment().location]"
		},
		"enableVwan": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"enableAzFw": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"enableVpnGw": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"enableErGw": {
			"type": "string",
			"allowedValues": [
				"Yes",
				"No"
			],
			"defaultValue": "No"
		},
		"primaryregioncode": {
			"type": "string"
		},
		"secondaryregioncode": {
			"type": "string"
		},
		"connectivitySubscriptionId": {
			"type": "string"
		},
		"identitySubscriptionId": {
			"type": "string"
		},
		"onlineLzSubscriptionId": {
			"type": "array"
		},
		"prodLzSubscriptionId": {
			"type": "array"
		},
		"uatLzSubscriptionId": {
			"type": "array"
		},
		"devLzSubscriptionId": {
			"type": "array"
		},
		"app": {
			"type": "string"
		}	
	},
	"variables": {
		"vWanName": "[concat(parameters('topLevelManagementGroupPrefix'), '-vwan-', parameters('location'))]",
		"vpngwname": "[concat(parameters('topLevelManagementGroupPrefix'), '-vpngw-', parameters('location'))]",
		"erGwName": "[concat(parameters('topLevelManagementGroupPrefix'), '-ergw-', parameters('location'))]",
		"rgName": "[concat('rg', '-conn-', parameters('primaryregioncode'))]",
		"rgNameIdentity": "[concat('rg', '-idy-', parameters('primaryregioncode'))]",
		"rgNameManagement": "[concat('rg', '-mgmt-', parameters('primaryregioncode'))]",
		"rgNamecldshellStgpri": "[concat('rg', '-cldshellStg-', parameters('primaryregioncode'))]",
		"rgNamecldshellStgsec": "[concat('rg', '-cldshellStg-', parameters('secondaryregioncode'))]",
		"rgNameOnline": "[concat('rg-', parameters('app'), '-online')]",
		"rgNameProd": "[concat('rg-', parameters('app'), '-prod')]",
		"rgNameUat": "[concat('rg-', parameters('app'), '-uat')]",
		"rgNameDev": "[concat('rg-', parameters('app'), '-dev')]",
		"rgNamesbx": "[concat('rg-', parameters('app'), '-sbx')]",
		"rgName2": "[concat('rg', '-conn-', parameters('secondaryregioncode'))]",
		"vHubName": "[concat(parameters('topLevelManagementGroupPrefix'), '-vhub-', parameters('location'))]",
		"azFwName": "[concat(parameters('topLevelManagementGroupPrefix'), '-fw-', parameters('location'))]",
		"vWanSku": "Standard",
		"vwanresourceid": "[concat('/subscriptions/', parameters('connectivitySubscriptionId'), '/resourceGroups/' ,variables('rgName'),'/providers/Microsoft.Network/virtualWans/', variables('vwanname'))]",
		"vwanhub": "[concat('/subscriptions/', parameters('connectivitySubscriptionId'), '/resourceGroups/', variables('rgName'),'/providers/Microsoft.Network/virtualHubs/', variables('vhubname'))]",
		"vhubsku": "Standard",
		"vpnbgpasn": 65515,
		"resourceDeploymentName": "[take(concat(deployment().name, '-vwan'), 64)]"
	},
	"resources": [{
		"type": "Microsoft.Resources/deployments",
		"apiVersion": "2019-10-01",
		"location": "[deployment().location]",
		"name": "[concat('Ent-Scale', '-connectivity')]",
		"subscriptionId": "[parameters('connectivitySubscriptionId')]",
		   "copy": {
				"name": "hubCopy",
				"count": "[if(not(empty(parameters('prodLzSubscriptionId'))), length(parameters('prodLzSubscriptionId')), 1)]"
			},
		"properties": {
			"mode": "Incremental",
			"template": {
				"$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
				"contentVersion": "1.0.0.0",
				"parameters": {},
				"resources": [{
						"type": "Microsoft.Resources/resourceGroups",
						"apiVersion": "2019-10-01",
						"location": "[deployment().location]",
						"name": "[variables('rgName')]",
						"properties": {}
					},
					{
						"type": "Microsoft.Resources/deployments",
						"apiVersion": "2019-10-01",
						"name": "[variables('resourceDeploymentName')]",
						"resourceGroup": "[variables('rgName')]",
						"dependsOn": [
							"[concat('Microsoft.Resources/resourceGroups/', variables('rgName'))]"
						],
								     
						"properties": {
							"mode": "Incremental",
							"template": {
								"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
								"contentVersion": "1.0.0.0",
								"parameters": {},
								"resources": [{
										"type": "Microsoft.Network/virtualWans",
										"apiVersion": "2020-05-01",
										"name": "[variables('vWanName')]",
										"location": "[parameters('location')]",
										"properties": {
											"virtualHubs": [],
											"vpnSites": [],
											"type": "[variables('vwansku')]"
										}
									},
									{
										"condition": "[and(equals(parameters('enableVwan'), 'Yes'), not(empty(parameters('addressPrefix'))))]",
										"type": "Microsoft.Network/virtualHubs",
										"apiVersion": "2020-05-01",
										"location": "[parameters('location')]",
										"name": "[variables('vhubname')]",
										"dependsOn": [
											"[concat('Microsoft.Network/virtualWans/', variables('vWanName'))]"
										],
										"properties": {
											"virtualWan": {
												"id": "[variables('vwanresourceid')]"
											},
											"addressPrefix": "[parameters('addressPrefix')]",
											"sku": "[variables('vhubsku')]"
										}
									},
									{
										"condition": "[and(equals(parameters('enableVwan'), 'Yes'), equals(parameters('enableVpnGw'), 'Yes'))]",
										"type": "Microsoft.Network/vpnGateways",
										"apiVersion": "2020-05-01",
										"location": "[parameters('location')]",
										"name": "[variables('vpngwname')]",
										"dependsOn": [
											"[concat('Microsoft.Network/virtualHubs/',variables('vhubname'))]"
										],
										"properties": {
											"virtualHub": {
												"id": "[variables('vwanhub')]"
											},
											"bgpSettings": {
												"asn": "[variables('vpnbgpasn')]"
											},
											"vpnGatewayScaleUnit": 1
										}
									},
									{
										"condition": "[and(equals(parameters('enableVwan'), 'Yes'), equals(parameters('enableErGw'), 'Yes'))]",
										"type": "Microsoft.Network/expressRouteGateways",
										"apiVersion": "2020-05-01",
										"location": "[parameters('location')]",
										"name": "[variables('ergwname')]",
										"dependsOn": [
											"[concat('Microsoft.Network/virtualHubs/', variables('vhubname'))]"
										],
										"properties": {
											"virtualHub": {
												"id": "[variables('vwanhub')]"
											},
											"autoScaleConfiguration": {
												"bounds": {
													"min": 1,
													"max": 1
												}
											}
										}
									},
									{
										"condition": "[equals(parameters('enableAzFw'), 'Yes')]",
										"apiVersion": "2020-05-01",
										"type": "Microsoft.Network/azureFirewalls",
										"name": "[variables('azfwname')]",
										"location": "[parameters('location')]",
										"dependsOn": [
											"[concat('Microsoft.Network/virtualHubs/',variables('vhubname'))]"
										],
										"properties": {
											"sku": {
												"Name": "AZFW_Hub",
												"Tier": "Standard"
											},
											"hubIPAddresses": {
												"publicIPs": {
													"addresses": "[json('[]')]",
													"count": 1
												}
											},
											"virtualHub": {
												"id": "[variables('vwanhub')]"
											},
											"firewallPolicy": {
												"id": "[json('null')]"
											}
										}
									},
									 {
			"condition": "[not(empty(parameters('identitySubscriptionId')))]",
			"type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
			"apiVersion": "2020-05-01",
			"name": "[format('{0}/{1}_connection', variables('vhubname'), parameters('identityVnetName'))]",
			"dependsOn": [
				"[concat('Microsoft.Network/virtualHubs/',variables('vhubname'))]",
				"[concat('Microsoft.Network/vpnGateways/',variables('vpngwname'))]"
			],

			"properties": {
			      "remoteVirtualNetwork": {
							"id": "[concat('/subscriptions/', parameters('identitySubscriptionId'), '/resourceGroups/', variables('rgNameIdentity'), '/providers/Microsoft.Network/virtualNetworks/', parameters('identityVnetName'))]"
							},
							"allowHubToRemoteVnetTransit": true,
							"allowRemoteVnetToUseHubVnetGateways": true,
							"enableInternetSecurity": true
			}
		},
									      {
			"condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
			"type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
			"apiVersion": "2020-05-01",
			"name": "[format('{0}/{1}_connection', variables('vhubname'), parameters('onlineVnetName'))]",
			"dependsOn": [
				"[concat('Microsoft.Network/virtualHubs/',variables('vhubname'))]",
				"[concat('Microsoft.Network/vpnGateways/',variables('vpngwname'))]",
				"[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', variables('vhubname'), format('{0}_connection', parameters('identityVnetName')))]"
			],

			"properties": {
			      "remoteVirtualNetwork": {
							"id": "[concat('/subscriptions/', if(not(empty(parameters('onlineLzSubscriptionId'))), parameters('onlineLzSubscriptionId')[copyIndex()], ''), '/resourceGroups/', variables('rgNameOnline'), '/providers/Microsoft.Network/virtualNetworks/', parameters('onlineVnetName'))]"
							},
							"allowHubToRemoteVnetTransit": true,
							"allowRemoteVnetToUseHubVnetGateways": true,
							"enableInternetSecurity": true
			}
		},
									     
									      {
			"condition": "[not(empty(parameters('prodLzSubscriptionId')))]",
			"type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
			"apiVersion": "2020-05-01",
			"name": "[format('{0}/{1}_connection', variables('vhubname'), parameters('prodVnetName'))]",
			"dependsOn": [
				"[concat('Microsoft.Network/virtualHubs/',variables('vhubname'))]",
				"[concat('Microsoft.Network/vpnGateways/',variables('vpngwname'))]",
				"[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', variables('vhubname'), format('{0}_connection', parameters('onlineVnetName')))]"
			],

			"properties": {
			      "remoteVirtualNetwork": {
							"id": "[concat('/subscriptions/', if(not(empty(parameters('prodLzSubscriptionId'))), parameters('prodLzSubscriptionId')[copyIndex()], ''), '/resourceGroups/', variables('rgNameProd'), '/providers/Microsoft.Network/virtualNetworks/', parameters('prodVnetName'))]"
							},
							"allowHubToRemoteVnetTransit": true,
							"allowRemoteVnetToUseHubVnetGateways": true,
							"enableInternetSecurity": true
			}
		},
									         {
			"condition": "[not(empty(parameters('uatLzSubscriptionId')))]",
			"type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
			"apiVersion": "2020-05-01",
			"name": "[format('{0}/{1}_connection', variables('vhubname'), parameters('uatVnetName'))]",
			"dependsOn": [
				"[concat('Microsoft.Network/virtualHubs/',variables('vhubname'))]",
				"[concat('Microsoft.Network/vpnGateways/',variables('vpngwname'))]",
				"[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', variables('vhubname'), format('{0}_connection', parameters('prodVnetName')))]"
			],

			"properties": {
			      "remoteVirtualNetwork": {
							"id": "[concat('/subscriptions/', if(not(empty(parameters('uatLzSubscriptionId'))), parameters('uatLzSubscriptionId')[copyIndex()], ''), '/resourceGroups/', variables('rgNameUat'), '/providers/Microsoft.Network/virtualNetworks/', parameters('uatVnetName'))]"
							},
							"allowHubToRemoteVnetTransit": true,
							"allowRemoteVnetToUseHubVnetGateways": true,
							"enableInternetSecurity": true
			}
		},
									         {
			"condition": "[not(empty(parameters('devLzSubscriptionId')))]",
			"type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
			"apiVersion": "2020-05-01",
			"name": "[format('{0}/{1}_connection', variables('vhubname'), parameters('devVnetName'))]",
			"dependsOn": [
				"[concat('Microsoft.Network/virtualHubs/',variables('vhubname'))]",
				"[concat('Microsoft.Network/vpnGateways/',variables('vpngwname'))]",
				"[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', variables('vhubname'), format('{0}_connection', parameters('uatVnetName')))]"
			],

			"properties": {
			      "remoteVirtualNetwork": {
							"id": "[concat('/subscriptions/', if(not(empty(parameters('devLzSubscriptionId'))), parameters('devLzSubscriptionId')[copyIndex()], ''), '/resourceGroups/', variables('rgNameDev'), '/providers/Microsoft.Network/virtualNetworks/', parameters('devVnetName'))]"
							},
							"allowHubToRemoteVnetTransit": true,
							"allowRemoteVnetToUseHubVnetGateways": true,
							"enableInternetSecurity": true
			}
		}
								
							
									      
								]
							}
						}
					
						
						
					}
				]
			}
		}
	}]
}
